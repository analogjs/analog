// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`preset generator > should match index.html 1`] = `
"<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <title>my-app</title>
    <base href="/" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <link rel="icon" type="image/x-icon" href="/favicon.ico" />
  </head>
  <body>
    <app-root></app-root>
    <script type="module" src="/my-app/src/main.ts"></script>
  </body>
</html>
"
`;

exports[`preset generator > should match project.json 1`] = `
"{
  "name": "my-app",
  "$schema": "../node_modules/nx/schemas/project-schema.json",
  "projectType": "application",
  "prefix": "app",
  "sourceRoot": "my-app/src",
  "tags": ["tag1", "tag2", "type:app"],
  "targets": {
    "build": {
      "executor": "@analogjs/platform:vite",
      "options": {
        "configFile": "my-app/vite.config.ts",
        "main": "my-app/src/main.ts",
        "outputPath": "dist/my-app/client",
        "tsConfig": "my-app/tsconfig.app.json"
      },
      "defaultConfiguration": "production",
      "configurations": {
        "development": {
          "mode": "development"
        },
        "production": {
          "sourcemap": false,
          "mode": "production"
        }
      },
      "outputs": ["{workspaceRoot}/dist/apps/my-app"]
    },
    "serve": {
      "executor": "@analogjs/platform:vite-dev-server",
      "defaultConfiguration": "development",
      "options": {
        "buildTarget": "my-app:build",
        "port": 4200
      },
      "configurations": {
        "development": {
          "buildTarget": "my-app:build:development",
          "hmr": true
        },
        "production": {
          "buildTarget": "my-app:build:production"
        }
      }
    },
    "extract-i18n": {
      "executor": "@angular-devkit/build-angular:extract-i18n",
      "options": {
        "buildTarget": "my-app:build"
      }
    },
    "test": {
      "executor": "@analogjs/vitest-angular:test",
      "options": {
        "config": "vite.config.ts"
      }
    },
    "serve-static": {
      "continuous": true,
      "executor": "@nx/web:file-server",
      "options": {
        "buildTarget": "my-app:build",
        "port": 4200,
        "staticFilePath": "dist/my-app/browser",
        "spa": true
      }
    }
  }
}
"
`;

exports[`preset generator > should match src/test-setup.ts 1`] = `
"import '@analogjs/vitest-angular/setup-zone';

import {
  BrowserDynamicTestingModule,
  platformBrowserDynamicTesting,
} from '@angular/platform-browser-dynamic/testing';
import { getTestBed } from '@angular/core/testing';

getTestBed().initTestEnvironment(
  BrowserDynamicTestingModule,
  platformBrowserDynamicTesting(),
);
"
`;

exports[`preset generator > should match vite.config.ts 1`] = `
"/// <reference types="vitest" />

import analog from '@analogjs/platform';
import { defineConfig } from 'vite';
import { nxViteTsPaths } from '@nx/vite/plugins/nx-tsconfig-paths.plugin';

// @ts-expect-error @tailwindcss/vite currently uses mts. TypeScript is complaining this, but it works as expected.
import tailwindcss from '@tailwindcss/vite';

// https://vitejs.dev/config/
export default defineConfig(({ mode }) => {
  return {
    root: __dirname,
    cacheDir: \`../node_modules/.vite\`,
    build: {
      outDir: '../dist/./my-app/client',
      reportCompressedSize: true,
      target: ['es2020'],
    },
    server: {
      fs: {
        allow: ['.'],
      },
    },
    plugins: [tailwindcss(), analog(), nxViteTsPaths()],
    test: {
      globals: true,
      environment: 'jsdom',
      setupFiles: ['src/test-setup.ts'],
      include: ['**/*.spec.ts'],
      reporters: ['default'],
    },
    define: {
      'import.meta.vitest': mode !== 'production',
    },
  };
});
"
`;

exports[`preset generator > should match vite.config.ts 2`] = `
"/// <reference types="vitest" />

import analog from '@analogjs/platform';
import { defineConfig } from 'vite';
import { nxViteTsPaths } from '@nx/vite/plugins/nx-tsconfig-paths.plugin';

// @ts-expect-error @tailwindcss/vite currently uses mts. TypeScript is complaining this, but it works as expected.
import tailwindcss from '@tailwindcss/vite';

// https://vitejs.dev/config/
export default defineConfig(({ mode }) => {
  return {
    root: __dirname,
    cacheDir: \`../node_modules/.vite\`,
    build: {
      outDir: '../dist/./my-app/client',
      reportCompressedSize: true,
      target: ['es2020'],
    },
    server: {
      fs: {
        allow: ['.'],
      },
    },
    plugins: [tailwindcss(), analog(), nxViteTsPaths()],
    test: {
      globals: true,
      environment: 'jsdom',
      setupFiles: ['src/test-setup.ts'],
      include: ['**/*.spec.ts'],
      reporters: ['default'],
    },
    define: {
      'import.meta.vitest': mode !== 'production',
    },
  };
});
"
`;
