// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`authoring ng file > should process component as an analog file 1`] = `
"import { Component, ChangeDetectionStrategy } from '@angular/core';
import { signal, input, ViewChild, afterNextRender, ElementRef, viewChild, viewChildren, contentChild, contentChildren, output, model } from "@angular/core";
import External from "./external.analog";
import { ExternalService } from "./external";
import { ExternalEnum } from "./external.model";
import nonameanalog from "./noname.analog";

@Component({
    standalone: true,
    selector: 'virtual,Virtual',
    changeDetection: ChangeDetectionStrategy.OnPush,
    template: \`<div #divElement>Component</div>
  <p>{{ counter() }}</p>
  <p>{ a }</p>
  <p>{ b }</p>
  <p>{ c }</p>
  <p>{{ test }}</p>\`,
    styles: \`div {    color: red;  }  p {    color: blue;  }\`,
    host: { "class": "flex flex-col", "[class.binding]": "counter()", "(click)": "handleClick($event)" },
    queries: {
        divElement: new ViewChild('divElement')
    },
    imports: [External, nonameanalog],
    providers: [ExternalService],
    outputs: ['output', 'outputWithType']
})
export default class VirtualAnalogComponent {
    constructor() {
        let divElement;
        let test;


        setTimeout(() => {
            test = 'test';
        }, 1000)
        const counter = (this.counter = signal(0));

        const [a, b, , c = 4] = [1, 2, 3];
        this.a = a;
        this.b = b;
        this.c = c;
        const inputWithDefault = this.inputWithDefault
        const inputWithoutDefault = this.inputWithoutDefault
        const inputWithAlias = this.inputWithAlias
        const inputWithoutDefaultWithAlias = this.inputWithoutDefaultWithAlias
        const inputWithTransform = this.inputWithTransform
        const requiredInput = this.requiredInput
        const requiredInputWithTransform = this.requiredInputWithTransform
        const output = this.output
        const newOutput = this.newOutput
        const outputWithType = this.outputWithType
        const myModel = this.myModel
        const viewChildEl = this.viewChildEl
        const viewChildRequiredEl = this.viewChildRequiredEl
        const viewChildrenEl = this.viewChildrenEl
        const contentChildEl = this.contentChildEl
        const contentChildRequiredEl = this.contentChildRequiredEl
        const contentChildrenEl = this.contentChildrenEl


        afterNextRender(() => {
            console.log('the div', divElement);
        })

        Object.defineProperties(this, {
            divElement: { get() { return divElement; }, set(v) { divElement = v; } },
            test: { get() { return test; }, set(v) { test = v; } },
        });
    }

    protected Math = Math;
    protected a;
    protected b;
    protected c;
    protected inputWithDefault = input("");
    protected inputWithoutDefault = input<string>();
    protected inputWithAlias = input("", { alias: "theAlias" });
    protected inputWithoutDefaultWithAlias = input<string | undefined>(undefined, {
        alias: "theAlias",
    });
    protected inputWithTransform = input<unknown, boolean>("", {
        transform: booleanAttribute,
    });
    protected requiredInput = input.required<string>();
    protected requiredInputWithTransform = input.required<unknown, number>({
        transform: (value) => numberAttribute(value, 10),
    });
    protected output = new EventEmitter();
    protected newOutput = output();
    protected outputWithType = new EventEmitter<string>();
    protected myModel = model();
    protected viewChildEl = viewChild<HTMLDivElement>('divElement');
    protected viewChildRequiredEl = viewChild.required<HTMLDivElement>('divElement');
    protected viewChildrenEl = viewChildren<HTMLDivElement[]>('divElement');
    protected contentChildEl = contentChild<ElementRef>('divElement');
    protected contentChildRequiredEl = contentChild.required<ElementRef>('divElement');
    protected contentChildrenEl = contentChildren<HTMLDivElement[]>('divElement');
    protected ExternalEnum = ExternalEnum;
}


export const routeMeta = {
    title: 'My page',
    canActivate: [() => true],
}


export interface MyInterface {
    title: string
}


export type MyType = string;


export enum Direction {
    Up,
    Down,
    Left,
    Right,
}


export function myFunc() {
    console.log('hello');
}
"
`;

exports[`authoring ng file > should process component with markdown as analog file with a virtual templateUrl 1`] = `
"
import { Component, ChangeDetectionStrategy } from '@angular/core';

@Component({
  standalone: true,
  selector: 'virtual,Virtual',
  changeDetection: ChangeDetectionStrategy.OnPush,
  templateUrl: \`virtual-analog:virtual.analog\`,
  host: {"lang":"md","class":"flex flex-col","[style]":"{ color: 'red' }"}
})
export default class VirtualAnalogComponent {
  constructor() {}
}"
`;

exports[`authoring ng file > should process directive as an analog file 1`] = `
"import { Directive } from '@angular/core';
import { inject, ElementRef, afterNextRender } from "@angular/core";

@Directive({
    standalone: true,
    selector: 'input[directive]'
})
export default class VirtualAnalogDirective {
    constructor() {
        const elRef = (this.elRef = inject(ElementRef));


        afterNextRender(() => {
            elRef.nativeElement.focus();
        });
        this.onInit = () => {
            console.log('init code');
        }


        effect(() => {
            console.log('just some effect');
        });
    }

    ngOnInit() {
        this.onInit();
    }
}
"
`;
