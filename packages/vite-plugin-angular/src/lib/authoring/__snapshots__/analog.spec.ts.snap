// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`authoring ng file > should process component as an analog file 1`] = `
"import { Component, ChangeDetectionStrategy } from '@angular/core';
import { signal, input, ViewChild, afterNextRender, ElementRef, viewChild, viewChildren, contentChild, contentChildren, output, model, outputFromObservable } from "@angular/core";
import External from "./external.analog";
import { ExternalService } from "./external";
import { ExternalEnum } from "./external.model";
import nonameanalog from "./noname.analog";
import nonameag from "./noname.ag";
@Component({
    standalone: true,
    selector: 'virtual,Virtual',
    changeDetection: ChangeDetectionStrategy.OnPush,
    template: \`<div #divElement>Component</div>
  <p>{{ counter() }}</p>
  <p>{ a }</p>
  <p>{ b }</p>
  <p>{ c }</p>
  <p>{{ test }}</p>\`,
    styles: \`div {    color: red;  }  p {    color: blue;  }\`,
    host: { "class": "flex flex-col", "[class.binding]": "counter()", "(click)": "handleClick($event)" },
    queries: {
        divElement: new ViewChild('divElement')
    },
    imports: [External, nonameanalog, nonameag],
    providers: [ExternalService]
})
export default class VirtualAnalogComponent {
    constructor() {
        let divElement;
        let test;
        const counter = this.counter;
        const a = this.a;
        const b = this.b;
        const c = this.c;
        const restArr = this.restArr;
        const foo = this.foo;
        const renamedBar = this.renamedBar;
        const nonExist = this.nonExist;
        const restObj = this.restObj;
        const inputWithDefault = this.inputWithDefault;
        const inputWithoutDefault = this.inputWithoutDefault;
        const inputWithAlias = this.inputWithAlias;
        const inputWithoutDefaultWithAlias = this.inputWithoutDefaultWithAlias;
        const inputWithTransform = this.inputWithTransform;
        const requiredInput = this.requiredInput;
        const requiredInputWithTransform = this.requiredInputWithTransform;
        const newOutput = this.newOutput;
        const stream$ = this.stream$;
        const outputWithObservable = this.outputWithObservable;
        const myModel = this.myModel;
        const viewChildEl = this.viewChildEl;
        const viewChildRequiredEl = this.viewChildRequiredEl;
        const viewChildrenEl = this.viewChildrenEl;
        const contentChildEl = this.contentChildEl;
        const contentChildRequiredEl = this.contentChildRequiredEl;
        const contentChildrenEl = this.contentChildrenEl;
        const route = this.route;
        const id = this.id;
        const nativeElement = this.nativeElement;
        const elementId = this.elementId;
        setTimeout(() => {
            test = 'test';
        }, 1000)
        afterNextRender(() => {
            console.log('the div', divElement);
        })
        Object.defineProperties(this, {
            divElement: { set(v) { divElement = v; }get() { return divElement } },
            test: { set(v) { test = v; }get() { return test } },
        })
    }
    protected readonly Math = Math;
    protected readonly routeMeta = routeMeta;
    counter = signal(0);
    private readonly __destructured1 = [1, 2, 3];
    a = this.__destructured1.a;
    b = this.__destructured1.b;
    c = this.__destructured1.c === undefined ? 4 : this.__destructured1.c;
    private readonly __destructured2 = [1, 2, 3, 4, 5];
    restArr = (() => {
        const [, , ...restArr] = this.__destructured2;
        return restArr;
    })();
    private readonly __destructured3 = { foo: 1, bar: 2, baz: 3 };
    foo = this.__destructured3.foo;
    renamedBar = this.__destructured3.bar;
    nonExist = this.__destructured3.nonExist === undefined ? 4 : this.__destructured3.nonExist;
    restObj = (() => {
        const { foo, bar: renamedBar, nonExist = 4, ...restObj } = this.__destructured3;
        return restObj;
    })();
    inputWithDefault = input("");
    inputWithoutDefault = input<string>();
    inputWithAlias = input("", { alias: "theAlias" });
    inputWithoutDefaultWithAlias = input<string | undefined>(undefined, {
        alias: "theAlias",
    });
    inputWithTransform = input<unknown, boolean>("", {
        transform: booleanAttribute,
    });
    requiredInput = input.required<string>();
    requiredInputWithTransform = input.required<unknown, number>({
        transform: (value) => numberAttribute(value, 10),
    });
    newOutput = output();
    stream$ = new BehaviorSubject<string>('hello');
    outputWithObservable = outputFromObservable(this.stream$);
    myModel = model();
    viewChildEl = viewChild<HTMLDivElement>('divElement');
    viewChildRequiredEl = viewChild.required<HTMLDivElement>('divElement');
    viewChildrenEl = viewChildren<HTMLDivElement[]>('divElement');
    contentChildEl = contentChild<ElementRef>('divElement');
    contentChildRequiredEl = contentChild.required<ElementRef>('divElement');
    contentChildrenEl = contentChildren<HTMLDivElement[]>('divElement');
    route = inject(ActivatedRoute);
    id = this.route.snapshot.paramMap.get('id');
    private readonly __destructured4 = inject(ElementRef);
    nativeElement = this.__destructured4.nativeElement;
    elementId = this.nativeElement.id;
    protected readonly myFunc = myFunc;
    protected readonly ExternalEnum = ExternalEnum;
}
export const routeMeta = {
    title: 'My page',
    canActivate: [() => true],
}
export function myFunc() {
    console.log('hello');
}
"
`;

exports[`authoring ng file > should process component with markdown as analog file with a virtual templateUrl 1`] = `
"
import { Component, ChangeDetectionStrategy } from '@angular/core';

@Component({
  standalone: true,
  selector: 'virtual,Virtual',
  changeDetection: ChangeDetectionStrategy.OnPush,
  templateUrl: \`virtual-analog:virtual.analog\`,
  host: {"lang":"md","class":"flex flex-col","[style]":"{ color: 'red' }"}
})
export default class VirtualAnalogComponent {
  constructor() {}
}"
`;

exports[`authoring ng file > should process directive as an analog file 1`] = `
"import { Directive } from '@angular/core';
import { inject, ElementRef, afterNextRender } from "@angular/core";
@Directive({
    standalone: true,
    selector: 'input[directive]'
})
export default class VirtualAnalogDirective {
    constructor() {
        const elRef = this.elRef;
        afterNextRender(() => {
            elRef.nativeElement.focus();
        });
        this.onInit = () => {
            console.log('init code');
        }
        effect(() => {
            console.log('just some effect');
        });
    }
    elRef = inject(ElementRef);
    ngOnInit() {
        this.onInit();
    }
}
"
`;
